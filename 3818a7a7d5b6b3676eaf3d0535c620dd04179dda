{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c431a732_1d8b930d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 60
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "Hi Alexander; there\u0027s quite a bit of infrastructure code to maintain here, and I feel much of it would go away if we exploited shell scripts a little more. I\u0027ve left some comments inline.",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37620143_0215f52e",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "This looks like `$RANDOM`. But do we actually want something random? Or just distinct from any other console ID?",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5facc940_1ecb78d9",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 30,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "I think it needs to be unique since meson could be running multiple instances of the same test.\n\nRandom was just an easy way to achieve that. It\u0027s not ideal since there is a low probability of collision.\n\nWhat would you suggest? I see options like libuuid.\nhttps://www.man7.org/linux/man-pages/man3/uuid.3.html",
      "parentUuid": "37620143_0215f52e",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abed57a6_9a22c2a0",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-30T00:15:29Z",
      "side": 1,
      "message": "No, there\u0027s no need for libuuid. See my comment below about test names.",
      "parentUuid": "5facc940_1ecb78d9",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda97b1f_f814ceb6",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 38,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "So this looks a lot like `grep -qF ...`",
      "range": {
        "startLine": 37,
        "startChar": 1,
        "endLine": 38,
        "endChar": 21
      },
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d46e305b_07f53918",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 38,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "But ```grep -qF``` has like 0 readability.\n\nI would have to look it up actually what these flags mean.",
      "parentUuid": "eda97b1f_f814ceb6",
      "range": {
        "startLine": 37,
        "startChar": 1,
        "endLine": 38,
        "endChar": 21
      },
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24db8440_6f0c2ca0",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 38,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-30T00:15:29Z",
      "side": 1,
      "message": "Unfamiliarity doesn\u0027t mean it\u0027s the wrong tool?",
      "parentUuid": "d46e305b_07f53918",
      "range": {
        "startLine": 37,
        "startChar": 1,
        "endLine": 38,
        "endChar": 21
      },
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f22d1b19_9224fc24",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 38,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-30T09:40:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "24db8440_6f0c2ca0",
      "range": {
        "startLine": 37,
        "startChar": 1,
        "endLine": 38,
        "endChar": 21
      },
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33b2555a_0298d5e6",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 44,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "and this looks a lot like `! grep -qF ...`",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 44,
        "endChar": 21
      },
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b45867d_2c701bbe",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 44,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "But ```grep -qF``` has like 0 readability.\n\nI would have to look it up actually what these flags mean.",
      "parentUuid": "33b2555a_0298d5e6",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 44,
        "endChar": 21
      },
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3837564c_8732936b",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 47,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "Must we to dynamically generate config files? What are we actually trying to achieve? What are the alternatives?",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4920ff3_559b976d",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 47,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "The requirement for config files comes from the requirement to write a log file.\nSo the log file path has to be configured.\n\nCurrently i am generating the config file as the console id is randomized.\n\nThe console id only has to be unique and not necessarily random, as you suggested. This is because meson can execute tests in parallel and otherwise the log files and such from different tests would get in the way of each other.",
      "parentUuid": "3837564c_8732936b",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcf1f46f_99096465",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 47,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-30T00:15:29Z",
      "side": 1,
      "message": "Test names also need to be unique. Can we align things so the console ID is derived from the test name?\n\nRegarding the logs, can we derive the default log file name from the console ID (as an enhancement to the core obmc-console functionality)?",
      "parentUuid": "e4920ff3_559b976d",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a82b99_061f98ac",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 47,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-30T09:40:37Z",
      "side": 1,
      "message": "Deriving console id from the test name does not solve the issue of multiple instances of that test running at the same time. There needs to be a unique component that is incremented or randomized. \n\nWe could derive the default log file name from the console ID but that would not be backwards compatible. Any programs expecting the default filename at\n\n```\nstatic const char *default_filename \u003d LOCALSTATEDIR \"/log/obmc-console.log\";\n```\n\nmay  fail. We can create the symlink at runtime to fix the issue but the symlink would then need to be kept up to date when the console id is changed in configuration.\n\nWe could say that the default log file name will be derived from the console id \nonly in case of multiple consoles.",
      "parentUuid": "bcf1f46f_99096465",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76b0864c_43389322",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 104,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "Or we could invoke it from a test script that sets up the environment?",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bc924fc_30b16973",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 104,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "Same argument as above, I\u0027m somewhat allergic to bash scripts.\n\nThey work well in the simplest cases. But not scalable for integration tests and future expansion.",
      "parentUuid": "76b0864c_43389322",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26d0300a_6766da2c",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 104,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-30T00:15:29Z",
      "side": 1,
      "message": "\u003e But not scalable for integration tests\n\nCan you unpack this for me? What do you mean?\n\n\u003e and future expansion.\n\nWhat are the specific concerns about future expansion? Can you enumerate them?\n\n\u003e I\u0027m somewhat allergic to bash scripts.\n\nThat\u0027s unfortunate, but it does not mean that shell scripts are not the right tool for the job.\n\n`set -eu` goes a long way.",
      "parentUuid": "1bc924fc_30b16973",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d176309_2ccbce4c",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 104,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-30T09:40:37Z",
      "side": 1,
      "message": "\u003e Can you unpack this for me? What do you mean?\n\nShell scripts are not type-safe and do not have robust error handling.\n\nAlso it\u0027s kind of hard to migrate code between the support code and the individual tests, because it\u0027s different languages. \n\n\u003e What are the specific concerns about future expansion? Can you enumerate them?\n\nBash scripts cannot call c functions, only the already compiled binaries.\n\nSo if there is any need in the future to call a C function from the bash script that does the setup and coordinates the processes, it will have to be a separate binary. \n\n\u003e set -eu goes a long way.\n\nSane defaults are not a strength of shell scripts either.",
      "parentUuid": "26d0300a_6766da2c",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8237648d_0d349841",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 161,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "I feel like this would be easier in shell.",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "720fdf99_d2a09ce6",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 161,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "I try to avoid shell scripts whenever i can. When even a tiny bit of logic is required, shell scripts become unreadable by default.\n\n\nWhy would the setup be easier in shell? Handling the different processes has some boilerplate in C but at least it\u0027s explicit and easier to read.\n\n\nIf we avoid the shell scripts then people do not have to jump back and forth between 2 languages when working on the tests.",
      "parentUuid": "8237648d_0d349841",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caa160fb_a1811442",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 161,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-30T00:15:29Z",
      "side": 1,
      "message": "\u003e If we avoid the shell scripts then people do not have to jump back and forth between 2 languages when working on the tests.\n\nI expect the intersection of the sets of people who are working on obmc-console and who lack familiarity with shells is empty. This isn\u0027t a concern we should be accounting for.\n\n\u003e Why would the setup be easier in shell? \n\nShells coordinate processes. I see that as a fundamental problem they solve.\n\n\u003e Handling the different processes has some boilerplate in C but at least it\u0027s explicit and easier to read.\n\nOn the flip-side, you\u0027re writing yet more C, which is an error-prone task at the best of times. I feel that should be common ground based on experience with getting the mux patches merged.\n\nShell scripts, despite some of their hassles, are at least succinct in terms of running and managing processes.",
      "parentUuid": "720fdf99_d2a09ce6",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7b2ed37_e5932352",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 161,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-30T09:40:37Z",
      "side": 1,
      "message": "\u003e I expect the intersection of the sets of people who are working on obmc-console and who lack familiarity with shells is empty. This isn\u0027t a concern we should be accounting for.\n\nI don\u0027t have expertise with shell scripts, and my friend \nhttps://devhints.io/bash can vouch for that :)\nSwitching context between different languages just reduces the productivity and that\u0027s a concern.\n\n\u003e Shells coordinate processes. I see that as a fundamental problem they solve.\n\nYes they can do that well but C can do it just as well with some amount of boilerplate.\n\n\u003e On the flip-side, you\u0027re writing yet more C, which is an error-prone task at the best of times. I feel that should be common ground based on experience with getting the mux patches merged.\n\nAgreed that writing C code is an error-prone task.\n\nThe test code does not have to be watertight. It is ok IMO if there is edge cases in a test where memory can leak. A test should always terminate and has a timeout defined through meson anyways.\n\nIf the happy path is correct that\u0027s already enough for a regression test.\n\nWhen the unhappy path occurs then the test is already failed anyways and does not need to have perfect cleanup.\n\n\n\u003e Shell scripts, despite some of their hassles, are at least succinct in terms of running and managing processes.\n\nThey are succinct because they assume some default control flow that C does not.\nFor example the default in shell scripts is to continue despite the error and undefined variable.\n\nPatching that with the ```set -eu``` then leads to the problem with resource cleanup. Killing any processes we started during the test, and so on.\n\nSo there is a need for variables now to store the PID and such.\n\nWhich are untyped/string in bash. So now there is also a problem with readability.\n\nTo avoid repeating ourselves we write functions to extract the common code.\n\nThe functions are also untyped in bash. It is unclear which type the argument has. \n\nWhich makes it also hard to refactor any call sites.\n\n## in summary\n\n- i have many doubts about bash scripts\n- i have almost no expertise in writing bash scripts\n- shell scripts are objectively worse in various ways for many programming tasks\n- shell scripts do not scale due to above reason\n- the c code for a test does not have to have the same quality as the c code for a program\n- many checks can be ignored when writing a test in C. If the test crashes or segfaults, we are already on the unhappy path and the test has failed anyways.\n- we already have code for the integration tests written in C\n- it is unclear to me why shell has suddenly appeared on the drawing board. \n- it\u0027s not common to introduce a new language to a project just because it is slightly better at some task\n- it is unclear where the line should be drawn, if the entire test should be in bash or only the coordination part\n- writing tests in bash introduces an inconsistency with the existing tests which are written in C",
      "parentUuid": "caa160fb_a1811442",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60ade0e0_23c5c5ef",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 161,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-31T05:02:18Z",
      "side": 1,
      "message": "As a demonstration of what I had in mind, I\u0027ve re-implemented [test: console logging](https://gerrit.openbmc.org/c/openbmc/obmc-console/+/73119) in [wip: tests: Alternative test-console-logs-to-file](https://gerrit.openbmc.org/c/openbmc/obmc-console/+/73211).\n\nAs a small bit of analysis, accounting for all the required infrastructure for [test: console logging](https://gerrit.openbmc.org/c/openbmc/obmc-console/+/73119), we have the following diffstat:\n\n```\n$ git fetch https://gerrit.openbmc.org/openbmc/obmc-console refs/changes/19/73119/2 \u0026\u0026 git checkout FETCH_HEAD\nHEAD is now at 83fedbc99c3f test: console logging\n$ git id ef4060373dbea920962be155a6fcc80a7f4547aa\nef4060373dbe (\"Add debug logging\")\n$ git diff --stat ef4060373dbea920962be155a6fcc80a7f4547aa..\n console-client-main.c                             |  22 ++++++++++++++++++++++\n console-client.c                                  |   2 +-\n console-client.h                                  |  19 +++++++++++++++++++\n console-server-main.c                             |  22 ++++++++++++++++++++++\n console-server.c                                  |  75 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------------------\n console-server.h                                  |  14 ++++++++++++++\n meson.build                                       |   2 ++\n test/integration_test/console-server-test-util.c  | 244 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n test/integration_test/console-server-test-util.h  |  36 ++++++++++++++++++++++++++++++++++++\n test/integration_test/dbus-test-utils.c           |  56 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n test/integration_test/dbus-test-utils.h           |   5 +++++\n test/integration_test/test-console-logs-to-file.c |  72 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n test/meson.build                                  |  77 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n test/test-console-server-parse-args.c             |  63 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n test/wrapper.sh                                   |  16 ++++++++++++++++\n 15 files changed, 705 insertions(+), 20 deletions(-)\n$\n```\n\nAs it stands, `+705, -20` is all necessary for [test: console logging](https://gerrit.openbmc.org/c/openbmc/obmc-console/+/73119) to be run. Most of it\u0027s C, a small portion of it is shell, and another small portion is meson. By contrast, [wip: tests: Alternative test-console-logs-to-file](https://gerrit.openbmc.org/c/openbmc/obmc-console/+/73211) is a self-contained change that doesn\u0027t require any rework of the existing code, and weighs in at `+57, -2`. 45 lines of the diffstat are the (relatively straight-forward) shell script, which as far as I\u0027m aware meets all the isolation needs to enable parallel execution.",
      "parentUuid": "a7b2ed37_e5932352",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca752718_bf1c1970",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 201,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "Why system and why not `sd_bus_default()`?",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff4d37ad_dd89b238",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 201,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "```sd_bus_get_fd``` does not succeed in the console-server when i do that.\n\nTo me it looks like it is not allowed to re-use the bus connection in a child process like described here\nhttps://www.freedesktop.org/software/systemd/man/latest/sd_bus_get_fd.html#\n\nI think the AI described it pretty well:\n```\nTo handle D-Bus connections using sd_bus_default() in both parent and child \nprocesses, you should avoid sharing the sd_bus connection and associated file \ndescriptors across process boundaries. Instead, you should create a new sd_bus \nconnection in the child process.\n\n\nWhen you call sd_bus_default() in the parent process and then fork a child process, \nthe file descriptors associated with the D-Bus connection are inherited by the \nchild process, but the actual resources (context, etc.) are not safely shared. This \nis why sd_bus_get_fd() fails in the child process.\n\n```\n\nReworked things so now the tests are creating the dbus connection in ```fork_off_console_server``` and the connection is released in the individual tests.\n\nThe d-bus connection is created after the child has been forked off so no d-bus resources are leaked to the child.",
      "parentUuid": "ca752718_bf1c1970",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e96fabd_3d21f01a",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 210,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "Why do we have to externalise this? `obmc-console-server` is already capable of connecting to the bus itself.",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05429fb8_6dc46e5b",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 210,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "Most tests need access to d-bus at least to block on the console-server bus name.\n\nSo the bus name acts as a barrier for the test to continue.",
      "parentUuid": "3e96fabd_3d21f01a",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d686ae93_b6e3583c",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 228,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-29T02:15:31Z",
      "side": 1,
      "message": "Can we use the unix domain socket instead? It doesn\u0027t involve quite so much of a dance. `obmc-console-client` already does what we need, and we can invoke it from a coordinating shell-script.",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a83cf76e_af91d147",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 228,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-29T13:09:54Z",
      "side": 1,
      "message": "obmc-console-client would then need to be terminated after it has connected.\n\nOtherwise we just let it run free and hope it terminates when the server is killed.\n\nHow would we detect it has successfully connected?\n\nUsing the unix domain socket is a good idea but looking at ```client_init``` function, it\u0027s roughly the same amount of code.\n\nWhat about exposing parts of the ```client_init``` function as a separate function in obmc-console-client.h? \n\nThen we can re-use that function over here. Would that be ok with you?",
      "parentUuid": "d686ae93_b6e3583c",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "336f811b_49c4160c",
        "filename": "test/integration_test/console-server-test-util.c",
        "patchSetId": 60
      },
      "lineNbr": 228,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-30T00:15:29Z",
      "side": 1,
      "message": "\u003e Would that be ok with you?\n\nNot as yet. The discussion about doing this using shell scripts needs to be resolved.",
      "parentUuid": "a83cf76e_af91d147",
      "revId": "3818a7a7d5b6b3676eaf3d0535c620dd04179dda",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}