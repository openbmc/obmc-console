{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb877e9d_53b3dcae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "It\u0027s great that you have split this up from the original series, but this particular change is still where 90% of the complexity still lies.\n\n(I\u0027d sugg",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c34a7dff_7e6e2144",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "It\u0027s great that you have split this up from the original series, but this particular change is still where 90% of the complexity still lies.\n\nI\u0027d suggest that the aim would be to split the _complexity_ between patches in the series, rather than aiming for splitting the _size_ of those changes. Those are typically correlated, but not always.\n\nFor example, no need to put the documentation as the last patch - it\u0027s perfectly fine to document things as you add them (in fact, it really helps with review if you document as you go). Then you can update those docs as you add more stuff.\n\nFor this patch in the series, there\u0027s still a lot happening here:\n\n - you\u0027re adding header files for every handler, and changing the mechanism in which those handlers are initialised (why?)\n \n - you\u0027re introducing exit-on-sigint behaviour\n\n - made some things const\n \n - changed the scope of existing variables\n \nAll of these may well be useful, but are unrelated to the core of your change here (ie., adding multiplexer support). Having those as separate things will definitely make it more clear about how you\u0027re intending to implement the mux support, and for us to review and merge these changes.\n\nSo, I would suggest pulling those into separate changes that implement one concept -  as much as is sensible. There\u0027s a bit of elaboration about that at https://github.com/openbmc/docs/blob/master/CONTRIBUTING.md#organizing-commits\n\nFrom what I can extract from the actual multiplexer-related changes, this is what seems to be happening:\n \n  1. you\u0027ve split `struct console` into `struct console` and `struct console_server`. I assume there\u0027s one of the latter, and then one of the former for each muxed console\n  \n  2. changed the configuration mechanism from reading a single file to reading multiple files from a directory, with each configuring one of the `struct console`s above.\n  \n  3. added a pointer from the `struct console_server` to the currently-active `struct console`\n  \n  4. added a new dbus interface that can be used to update this pointer, and perform activation-related operations (printing the log and updating gpios)\n  \n  5. split the console_run to perform each iteration in a separate function\n  \n\nThose all make fairly logical sense, but we can probably split out a lot of the prerequisite infrastructure before adding the actual multiplexing; I imagine that may be quite small in the end.\n\nFoe example, just doing (1) in a single change (but still temporarily assuming a single `struct console`) would make things much more clear, as there would be a lot of churn contained into a technically-trivial patch.\n\nThere\u0027s a few concepts that I would suggest looking into at an initial review:\n\n  - Using multiple config files seems a bit unwieldy. Can we stay with the single file and just add the necessary structure to represent the mux control? Say, a [section]-based approach for each mux port?\n  \n  this would help to distinguish configuration that may be common across both consoles too.\n  \n  - it\u0027s assuming a 0/1 single-gpio-driven mux at the moment. I know this is the only implementation at present, but we may want to abstract this a little for alternatives (eg., there are parts that have two GPIOs that select between four uarts). While we don\u0027t want to design too far ahead, maybe just abstracting this into something like a `console_mux_select()`, that defers to our single gpio implementation for now.\n \nI\u0027ve put a few comments inline, but they may be less relevant depending on whether you make structural changes, so don\u0027t worry too much about addressing each of them at the moment - they\u0027re mainly pointers for future items.\n\nA couple of things in general though:\n\n - if you\u0027re adding new files, please include the copyright header too\n \n - your new header files seem to have a lot of unnecessary `#includes`\n \n - you have quite a few of\n \n```\nif (console-\u003eserver-\u003edebug) {\n    printf(...)\n}\n```\n\n   a helper function or macro may neaten this up a bit; say:\n    \n    \n```\nstatic void cs_debug(struct console_server *cs, const char *fmt, ...);\n```",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc88db24_db73ec0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-06-07T15:49:55Z",
      "side": 1,
      "message": "Thanks for all these comments! As you said, the details might still change while i break up the change, so i can look at those comments later.\n\nAs you suggested i tried to get some preliminary items done in patches previous to this on, the relation chain has been expanded. As you said, many of these things are unrelated to the uart mux support but required for the clean implementation.\n\n- separate patch to create struct console_server\n- separate patch to introduce run_console_iteration\n\nIf it\u0027s ok for you then we could focus on getting those and their predecessors reviewed, and i can create further patches for\n\n- create the additional dbus interface (between this patch and the console-ctl patch)\n- configuration directory / configuration file with sections\n- debug print macro/function",
      "parentUuid": "c34a7dff_7e6e2144",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6c1751_27598c11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-10T05:31:22Z",
      "side": 1,
      "message": "Sounds great, I\u0027ll take a look through the new series now.",
      "parentUuid": "dc88db24_db73ec0f",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bdcce83_8078c416",
        "filename": "config.c",
        "patchSetId": 21
      },
      "lineNbr": 36,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "We have this in `console-server.h` (which you no longer include)?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fd1da58_7d819cd8",
        "filename": "config.c",
        "patchSetId": 21
      },
      "lineNbr": 36,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T12:40:08Z",
      "side": 1,
      "message": "It\u0027s also defined in `test/test-client-escape.c`. Maybe we should add a `util.h` and move it there (and also the prototype for `write_buf_to_fd()`)? Or just `array.h`?",
      "parentUuid": "6bdcce83_8078c416",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ed697ed_2f55fed2",
        "filename": "config.c",
        "patchSetId": 21
      },
      "lineNbr": 149,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "This seems like it could be its own fix",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56918c7f_bdd768a7",
        "filename": "config.h",
        "patchSetId": 21
      },
      "lineNbr": 1,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "Copyright header",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ae24fbe_44f8dcbf",
        "filename": "config.h",
        "patchSetId": 21
      },
      "lineNbr": 5,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "doesn\u0027t look like you use `termios.h` or `stdlib.h` here ?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dbddb44_0cbb78d2",
        "filename": "console-client.c",
        "patchSetId": 21
      },
      "lineNbr": 274,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "The exit-on-sigint could be its own change",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c04d7ab4_c4215663",
        "filename": "console-dbus.c",
        "patchSetId": 21
      },
      "lineNbr": 20,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "Do we need this?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86c6a821_79198002",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 19,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "Keep the ordering intact; we have local headers all grouped below.",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62661f50_ffcddab5",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 653,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "As I mentioned in the overall comment, I\u0027m not sure why you\u0027re making this change. These should be fine to remain static and registered through the handlers array?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55070523_d2c25f76",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 653,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-06-07T15:49:55Z",
      "side": 1,
      "message": "From my understanding, the log handler refers to a filename which would be different for the different consoles behind a mux. It would be confusing to have log output from different consoles in the same file.\n\nIn socket-handler.c, the console_id is also part of the socket addr.sun_path,\nso the socket also appears to be a per-console feature.\n\nMaybe tty-handler is a console-server feature... then i would have to approach it differently.\n\nIt any case, from my perspective it makes no sense to have a separate section in the binary for these, unless some external program makes use of that. They can be in .data section like anything else or be allocated dynamically.",
      "parentUuid": "62661f50_ffcddab5",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db5811d9_d6506ac8",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 653,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-10T05:31:22Z",
      "side": 1,
      "message": "OK, so it sounds like the underlying requirement here is that you\u0027re able to have *multiple instances* of a handler, rather than anything around how the handlers are defined.\n\nIn order to do that, I\u0027d propose that we split the handler definitions from the handler instances. ie., `struct handler-\u003einit` would return a new instance of the handler, rather than populating the (static) `struct handler`. the struct handler just becomes only the per-handler data, consisting of ops and a name.\n\nThe separate section is just so we can build our handlers set at link-time, that\u0027s all; we could certainly do the same by exporting (just) the `struct handler` from each and putting those in an array and have that defined a build-time instead. However, this is pretty orthogonal to your goal of having multiple instances active - and certainly doesn\u0027t mean we need to create headers and expose internals for every handler.",
      "parentUuid": "55070523_d2c25f76",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43e81c29_4b8dad98",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 653,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T12:40:08Z",
      "side": 1,
      "message": "The link-time trick is tidy and I\u0027d prefer to keep it given it\u0027s what we already have.\n\nI think that addressing Jeremy\u0027s concerns would shave complexity from the patch (with the reduction in type exposure and header files). Reducing or isolating the complexity will help a lot with the review process.",
      "parentUuid": "db5811d9_d6506ac8",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88bdd8af_aed1f8e0",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 762,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "spurious `;`",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16444881_8c2c64af",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 794,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "Please use `goto` __very__ sparingly (typically: just for cleanup paths on excetpion). Here you\u0027re just skipping one statement with the goto; you may as well include that directly in the contidional",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72605867_c1c751b4",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 1251,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "This looks pretty much like `scandir()`, would it make sense to use that?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "131a2e18_71fd7d64",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 1251,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T12:40:08Z",
      "side": 1,
      "message": "I think given that we\u0027ve nixed the idea of multiple config files we should be able to drop it entirely (and not use scandir() either)?\n\nI think that should chop out a chunk of complexity from the config stuff below.",
      "parentUuid": "72605867_c1c751b4",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f2f4533_80a0d684",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 1261,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "maybe `warn()` for error-message consistency.",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56b7ac52_0c8eba39",
        "filename": "console-server.c",
        "patchSetId": 21
      },
      "lineNbr": 1277,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "are we not okay with links?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af1a7c69_ecae4e6b",
        "filename": "console-server.h",
        "patchSetId": 21
      },
      "lineNbr": 21,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "What atomic ops are we using here?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "051c8c76_a85ff177",
        "filename": "console-server.h",
        "patchSetId": 21
      },
      "lineNbr": 141,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "Sounds like this comment is no longer valid, and should be on `struct console_server` ?",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef8204aa_79bd3f98",
        "filename": "meson.build",
        "patchSetId": 21
      },
      "lineNbr": 82,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "this is a duplicate",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae387d80_cd520c23",
        "filename": "ringbuffer.c",
        "patchSetId": 21
      },
      "lineNbr": 171,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "seems unrelated",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be3de0fe_00b375fd",
        "filename": "socket-handler.c",
        "patchSetId": 21
      },
      "lineNbr": 250,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-06-07T10:05:45Z",
      "side": 1,
      "message": "no need to cast from `void *`",
      "revId": "5cfc0ff8281b59f948e68359c39a303af929264a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}