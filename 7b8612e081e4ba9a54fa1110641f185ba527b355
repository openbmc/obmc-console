{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a327d971_8061c688",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-09-13T10:02:33Z",
      "side": 1,
      "message": "Overall concept LGTM, just a minor clarification on the implementation.",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c68800_ce9dbb6b",
        "filename": "console-server.c",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-09-13T10:02:33Z",
      "side": 1,
      "message": "in this case, you\u0027ll want to free any allocated sink/source/path buffers; maybe move the `out_free_glob` label to before those `free()`s ?",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08236b62_5ea3ff81",
        "filename": "console-server.c",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-09-13T10:11:58Z",
      "side": 1,
      "message": "Yeah, the only problem then being that if we take the earlier `goto` then we\u0027d be free()-ing uninitialized pointers -- adding a second label before the free() calls and jumping to that instead should address both problems though I think.",
      "parentUuid": "d8c68800_ce9dbb6b",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03e09753_ec0eae4b",
        "filename": "console-server.c",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-09-13T10:10:23Z",
      "side": 1,
      "message": "Maybe add `/` to the disallowed chars in `sink`? Or check for this separately?\n\n[`aspeed-uart-routing \u003d ../../../../../../etc/passwd:foo` ?]",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5bc20ae_07460fb3",
        "filename": "console-server.c",
        "patchSetId": 2
      },
      "lineNbr": 443,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-09-13T10:15:33Z",
      "side": 1,
      "message": "Ooh, nice exploit haha!  Yeah, that\u0027d be good to prevent; adding `/` should be an easy fix I think.",
      "parentUuid": "03e09753_ec0eae4b",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2469905f_11e34794",
        "filename": "console-server.c",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-09-13T10:02:33Z",
      "side": 1,
      "message": "I admire that you\u0027re conserving lines of code here ðŸ˜Š however, this could be more clear with a bit of expansion.\n\n(and it doesn\u0027t fclose() if the fprintf fails? Are you relying on the implementation of `fprintf` to only hit the `FILE *` buffer, and the sysfs -\u003estore error being reported by `fclose()` ?)",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb57c2ba_7bb230c1",
        "filename": "console-server.c",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-09-13T10:11:58Z",
      "side": 1,
      "message": "Haha...the aim was more deduplication of the error-handling code than concision (and IMO it was significantly more readable in its original one-expression-per-line form in patchset 1 before reformatting to appease the CI checks), but yeah, I suppose it does also have the no-close-on-write-error problem (even though as you point out it _might_ technically be able to get away with it, especially omitting the linefeed as a concession to compatibility with kernels predating [this patch](https://lore.kernel.org/lkml/20230628083735.19946-2-zev@bewilderbeest.net/), but that certainly wasn\u0027t the intent)...I\u0027ll redo it a bit less tersely.",
      "parentUuid": "2469905f_11e34794",
      "revId": "7b8612e081e4ba9a54fa1110641f185ba527b355",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}