{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2eb0bf2a_687555d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "Hi Alexander, thanks for the fixes. On closer inspection there are some resource leaks that should be addressed so we get a clean leak report from valgrind.",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "134ea9de_abe86a28",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 422,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "I\u0027ll split this change out. It seems like a bit of an aesthetic concern that\u0027s not directly related to multiple consoles, and it doesn\u0027t rename any of the other `tty_*()` APIs.",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2967ee5b_940360c4",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 470,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "This one too",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3e39dbd_3c4c74e4",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1104,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "This all should be reduced to:\n\n```\nconsole_id \u003d config_resolve_config_id(config, opt_console_id);\n```\n\n`console_id` will never be `NULL` after the call to `config_resolve_config_id()`.",
      "range": {
        "startLine": 1095,
        "startChar": 1,
        "endLine": 1104,
        "endChar": 2
      },
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1888f9c5_829c7f49",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1104,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-12T09:59:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3e39dbd_3c4c74e4",
      "range": {
        "startLine": 1095,
        "startChar": 1,
        "endLine": 1104,
        "endChar": 2
      },
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f30c3a34_0feeb9f9",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1118,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "This leaks all the resources acquired in `console_init()`. We need a call to `console_fini()` before returning.",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa791e37_fa8d61fe",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1118,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-12T09:59:16Z",
      "side": 1,
      "message": "I\u0027ll reorder that so the ```reallocarray``` happens before console_init.",
      "parentUuid": "f30c3a34_0feeb9f9",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8feaffa_264c6af9",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1125,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "I\u0027d like Jeremy\u0027s input on this config property.\n\nRegarding the function implementation, the `active_console` out-parameter feels a bit awkward. Relating that back to the property, I wonder if this would be better at the global scope where it accepts the console ID to configure as the start-up console. That way we punt it up a level in the initialisation sequence and we don\u0027t have the out-parameter issue here.\n\nThere are other trade-offs either way: It\u0027s easy to configure a console ID that doesn\u0027t exist at the global scope, but it\u0027s also easy to specify multiple consoles as `initially-active` if the property is at the section scope. Either way we need to check for consistency. My gut feeling is the global-scope property might create fewer hassles.\n\nThis all seems relatively minor, but exposing support for the property then becomes part of the application ABI, so we do need to be a bit conservative.",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5d458e4_d12e75fd",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1125,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-07-12T01:41:08Z",
      "side": 1,
      "message": "Yep, agreed; I think a global `active-console` parameter may be best here.\n\nAt least any errors (ie, referring to a non-existent id) are easily locatable to a single error in the config.",
      "parentUuid": "e8feaffa_264c6af9",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1870532e_3b3d14f4",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1125,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-12T09:59:16Z",
      "side": 1,
      "message": "Ok, changed it to be a global ```active-console``` property in the config.",
      "parentUuid": "f5d458e4_d12e75fd",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e49f75b6_52393280",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1209,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-12T01:37:17Z",
      "side": 1,
      "message": "This leaks all the consoles we\u0027ve successfully set up. We should call `console_server_console_fini()` for them.",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9dfa31c_0050bbdf",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1209,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-12T09:59:16Z",
      "side": 1,
      "message": "When ```console_server_add_consoles``` is called in ```main```, the error path takes it to ```out_server_fini``` which calls ```console_server_fini``` which then calls ```console_server_console_fini(...)```  for the existing consoles.\n\nI chose this way of handling the error path since the teardown of all the existing consoles will have to happen anyway when the program exits.\n\nSo we might as well re-use the cleanup code for the error path on initialization.",
      "parentUuid": "e49f75b6_52393280",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34a0c091_1a6baf19",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1209,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-14T23:46:35Z",
      "side": 1,
      "message": "Okay, fair enough. However, because it\u0027s not adjacent in the code, do you mind adding a comment here about how that cleanup proceeds? That might help other people resolve the same question without having to each reason through it themselves.",
      "parentUuid": "b9dfa31c_0050bbdf",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "019406e2_40681bde",
        "filename": "console-server.c",
        "patchSetId": 5
      },
      "lineNbr": 1209,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2024-07-15T09:38:37Z",
      "side": 1,
      "message": "Here\u0027s an idea of how such a comment may look like\n\n```\n// return NULL here should trigger a cleanup further up\n```\n\nI would prefer to not add a comment since\n\n- i don\u0027t see this done anywhere else in the codebase\n- comments get old quickly and may become inconsistent with the code over time\n- memory management and cleanup happens all over the place, \n  if we start commenting this instance we might aswell comment everywhere\n- adding a comment here would introduce an inconsistency with the rest of the codebase\n\n\u003e That might help other people resolve the same question without having to each reason through it themselves.\n\nReasoning through the code is a good way to understand the project.\n\n\nWe can create good abstractions but there will always be a need to read through the code. Comments are good if something unusual is happening where there\u0027s no way to get it by just looking at the code (e.g. commenting about some magic value or special algorithm, referencing specifications, ...).",
      "parentUuid": "34a0c091_1a6baf19",
      "revId": "f862292b1db5763d9574469b4719b52b97b03525",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}