#!/usr/bin/sh

set -eux

SOCAT="$1"
SERVER="$2"
CLIENT="$3"

# Meet DBus bus and path name constraints, append own PID for parallel runs
TEST_NAME="$(basename "$0" | tr '-' '_')"_${$}
TEST_DIR="$(mktemp --tmpdir --directory "${TEST_NAME}.XXXXXX")"

SOCAT_PID=""
SOCAT_PID2=""
SERVER_PID=""

cd "$TEST_DIR"

cleanup()
{
  if [ -n "$SOCAT_PID2" ] && kill -0 "$SOCAT_PID2" 2>/dev/null; then
    kill "$SOCAT_PID2"
  fi
  if [ -n "$SERVER_PID" ] && kill -0 "$SERVER_PID" 2>/dev/null; then
    kill "$SERVER_PID"
  fi
  if [ -n "$SOCAT_PID" ] && kill -0 "$SOCAT_PID" 2>/dev/null; then
    kill "$SOCAT_PID"
  fi
  wait
  cd -
  rm -rf "$TEST_DIR"
}

trap cleanup EXIT

TEST_CONF="${TEST_NAME}.conf"
TEST_LOG="${TEST_NAME}.log"

cat <<EOF > "$TEST_CONF"
active-console = $TEST_NAME
[$TEST_NAME]
console-id = $TEST_NAME
logfile = $TEST_LOG
EOF

"$SOCAT" PTY,raw,echo=0,link=remote PTY,raw,echo=0,wait-slave,link=local &
SOCAT_PID="$!"
while ! [ -e remote -a -e local ]; do sleep 1; done

"$SERVER" --config "$TEST_CONF" "$(realpath local)" &
SERVER_PID="$!"

while ! busctl status --user xyz.openbmc_project.Console."${TEST_NAME}"; do sleep 1; done

socat -u "ABSTRACT:obmc-console.${TEST_NAME}" CREATE:socket_read.txt &
SOCAT_PID2="$!"

sleep 1

printf "socket-read" > remote

sleep 1

grep -qF socket-read socket_read.txt
